# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from proto.tasks.v1 import project_service_pb2 as proto_dot_tasks_dot_v1_dot_project__service__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in proto/tasks/v1/project_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ProjectServiceStub(object):
    """ProjectService is the service for managing projects.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListProjects = channel.unary_unary(
                '/tasks.v1.ProjectService/ListProjects',
                request_serializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.ListProjectsRequest.SerializeToString,
                response_deserializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.ListProjectsResponse.FromString,
                _registered_method=True)
        self.GetProject = channel.unary_unary(
                '/tasks.v1.ProjectService/GetProject',
                request_serializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.GetProjectRequest.SerializeToString,
                response_deserializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.Project.FromString,
                _registered_method=True)
        self.CreateProject = channel.unary_unary(
                '/tasks.v1.ProjectService/CreateProject',
                request_serializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.CreateProjectRequest.SerializeToString,
                response_deserializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.Project.FromString,
                _registered_method=True)
        self.UpdateProject = channel.unary_unary(
                '/tasks.v1.ProjectService/UpdateProject',
                request_serializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.UpdateProjectRequest.SerializeToString,
                response_deserializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.Project.FromString,
                _registered_method=True)
        self.DeleteProject = channel.unary_unary(
                '/tasks.v1.ProjectService/DeleteProject',
                request_serializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.DeleteProjectRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ProjectServiceServicer(object):
    """ProjectService is the service for managing projects.
    """

    def ListProjects(self, request, context):
        """ListProjects lists projects.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProject(self, request, context):
        """GetProject gets a project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProject(self, request, context):
        """CreateProject creates a project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProject(self, request, context):
        """UpdateProject updates a project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteProject(self, request, context):
        """DeleteProject deletes a project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProjectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListProjects': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProjects,
                    request_deserializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.ListProjectsRequest.FromString,
                    response_serializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.ListProjectsResponse.SerializeToString,
            ),
            'GetProject': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProject,
                    request_deserializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.GetProjectRequest.FromString,
                    response_serializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.Project.SerializeToString,
            ),
            'CreateProject': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProject,
                    request_deserializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.CreateProjectRequest.FromString,
                    response_serializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.Project.SerializeToString,
            ),
            'UpdateProject': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProject,
                    request_deserializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.UpdateProjectRequest.FromString,
                    response_serializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.Project.SerializeToString,
            ),
            'DeleteProject': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteProject,
                    request_deserializer=proto_dot_tasks_dot_v1_dot_project__service__pb2.DeleteProjectRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tasks.v1.ProjectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tasks.v1.ProjectService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProjectService(object):
    """ProjectService is the service for managing projects.
    """

    @staticmethod
    def ListProjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tasks.v1.ProjectService/ListProjects',
            proto_dot_tasks_dot_v1_dot_project__service__pb2.ListProjectsRequest.SerializeToString,
            proto_dot_tasks_dot_v1_dot_project__service__pb2.ListProjectsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tasks.v1.ProjectService/GetProject',
            proto_dot_tasks_dot_v1_dot_project__service__pb2.GetProjectRequest.SerializeToString,
            proto_dot_tasks_dot_v1_dot_project__service__pb2.Project.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tasks.v1.ProjectService/CreateProject',
            proto_dot_tasks_dot_v1_dot_project__service__pb2.CreateProjectRequest.SerializeToString,
            proto_dot_tasks_dot_v1_dot_project__service__pb2.Project.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tasks.v1.ProjectService/UpdateProject',
            proto_dot_tasks_dot_v1_dot_project__service__pb2.UpdateProjectRequest.SerializeToString,
            proto_dot_tasks_dot_v1_dot_project__service__pb2.Project.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tasks.v1.ProjectService/DeleteProject',
            proto_dot_tasks_dot_v1_dot_project__service__pb2.DeleteProjectRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
