// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	projectmodels "github.com/10Narratives/ready-to-do/server/internal/models/tasks/project"
	projectapi "github.com/10Narratives/ready-to-do/server/internal/transport/grpc/tasks/project"
	mock "github.com/stretchr/testify/mock"

	status "google.golang.org/grpc/status"
)

// ProjectService is an autogenerated mock type for the ProjectService type
type ProjectService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, args
func (_m *ProjectService) Create(ctx context.Context, args projectapi.CreateProjectArgs) (*projectmodels.Project, *status.Status) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *projectmodels.Project
	var r1 *status.Status
	if rf, ok := ret.Get(0).(func(context.Context, projectapi.CreateProjectArgs) (*projectmodels.Project, *status.Status)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, projectapi.CreateProjectArgs) *projectmodels.Project); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*projectmodels.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, projectapi.CreateProjectArgs) *status.Status); ok {
		r1 = rf(ctx, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*status.Status)
		}
	}

	return r0, r1
}

// NewProjectService creates a new instance of ProjectService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectService {
	mock := &ProjectService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
