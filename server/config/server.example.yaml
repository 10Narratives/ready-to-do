# server.example.yaml - Example configuration for the application server
# This configuration demonstrates all available options with production-ready defaults

# ======================
# Transport Layer Configuration
# ======================
transport:
  # ----------------------
  # gRPC Server Configuration
  # ----------------------
  grpc:
    # Network interface binding configuration
    host: "0.0.0.0"  # Listen on all network interfaces. For development, use "127.0.0.1" to restrict to localhost
    port: 50051       # Default gRPC port (1-65535). Change in production for security

    # Connection management parameters
    max_connection_age: "30m"         # Maximum lifetime before forced connection rotation
    max_connection_age_grace: "5m"    # Grace period for active connections to complete
    max_concurrent_streams: 1000      # Maximum simultaneous RPC streams per connection
    max_recv_msg_size: 4194304        # 4MB maximum incoming message size (protects against memory exhaustion)
    max_send_msg_size: 4194304        # 4MB maximum outgoing message size

    # Keepalive enforcement policies (protects against half-open connections)
    keepalive:
      enforcement_policy:
        min_time: "10s"               # Minimum allowed interval between client pings
        permit_without_stream: true   # Allow keepalive pings even without active streams
      server_parameters:
        max_connection_idle: "15m"    # Close idle connections after this duration
        time: "2h"                    # Ping frequency when connection is idle
        timeout: "20s"                # Wait time for ping acknowledgement

    # TLS Configuration (MUST be enabled in production)
    tls:
      enabled: true                   # Enable TLS encryption for all connections
      cert_file: "/etc/ssl/certs/server.crt"  # Server certificate chain (PEM format)
      key_file: "/etc/ssl/private/server.key" # Private key (PEM format, keep secure)
      client_ca_file: "/etc/ssl/certs/ca.crt" # Client CA for mutual TLS authentication

    # Health Check Configuration
    health:
      enabled: true                   # Enable gRPC health check service
      service_name: "ready_to_do"     # Custom service name for health checks

    # Reflection API (Development only - disable in production)
    reflection:
      enabled: true                   # Enables service discovery via grpcurl/grpcui

    # Logging Configuration
    logging:
      level: "info"                   # Log level: debug, info, warn, error
      format: "json"                  # Structured logging format (recommended)
      output: "stdout"                # Output destination (file path or stdout)

    # Graceful Shutdown Settings
    shutdown:
      grace_period: "30s"             # Wait for active RPCs to complete
      timeout: "10s"                  # Forcefully terminate remaining connections

  # ----------------------
  # HTTP Gateway Configuration
  # ----------------------
  gateway:
    # Network interface binding
    host: "0.0.0.0"  # Bind to all interfaces
    port: 8080        # HTTP access port (typically 80/443 in production)

    # HTTP Server Tuning
    http:
      read_timeout: "15s"       # Maximum duration for reading request
      write_timeout: "15s"      # Maximum duration for writing response
      idle_timeout: "60s"       # Keep-alive timeout
      max_header_bytes: 1048576 # 1MB max header size (prevents abuse)

    # CORS Configuration (Adjust carefully for production)
    cors:
      allowed_origins: ["*"]    # All domains allowed (* for development only)
      allowed_methods: ["GET", "POST", "PUT", "DELETE", "PATCH"]  # Standard REST methods
      allowed_headers: ["content-type", "authorization", "x-grpc-web"]  # Common headers
      allow_credentials: true   # Allow cookies/credentials
      max_age: "12h"           # Preflight response caching duration

    # JSON Marshaling Options
    marshaler:
      emit_defaults: false      # Omit zero-value fields from JSON output
      enums_as_ints: false     # Serialize enums as strings (more readable)
      orig_name: true          # Use original protobuf field names

    # Gateway TLS (Recommended for production)
    tls:
      enabled: true            # Enable HTTPS
      cert_file: "/etc/ssl/certs/gateway.crt"  # SSL certificate
      key_file: "/etc/ssl/private/gateway.key"  # Private key

    # Graceful Shutdown
    shutdown:
      grace_period: "30s"      # Wait for active HTTP requests
      timeout: "10s"           # Force shutdown after timeout

    # Logging Configuration
    logging:
      level: "info"            # Match with gRPC log level
      format: "json"           # Consistent format with gRPC
      output: "stdout"         # Centralized log collection

# ======================
# Database Configuration
# ======================
database:
  # Connection Parameters
  host: "db.example.com"       # Database server hostname
  port: "5432"                 # PostgreSQL default port
  user: "app_user"             # Dedicated application user
  password: "secure_password_123"  # Strong password REQUIRED
  dbname: "app_db"             # Application database name
  sslmode: "verify-full"       # Full SSL certificate validation (production)

  # Connection Pool Settings
  pool:
    max_conns: 20              # Maximum pool size (adjust based on DB capacity)
    min_conns: 2               # Minimum idle connections
    max_conn_lifetime: "30m"   # Recycle connections periodically
    max_conn_idle_time: "5m"   # Close idle connections
    health_check_period: "1m"  # Connection health verification interval

  # Operation Timeouts
  timeouts:
    connect: "5s"              # New connection timeout
    query: "30s"               # Query execution timeout
    exec: "30s"                # Write operation timeout

  # Logging Configuration
  logging:
    level: "info"              # SQL logging level
    format: "json"             # Structured logging
    output: "stdout"           # Log destination

# ======================
# Application Logging
# ======================
logging:
  level: "info"                # Global log level
  format: "json"               # Consistent structured logging
  output: "stdout"             # Centralized log collection
